{"version":3,"sources":["components/converter.js","App.js","serviceWorker.js","index.js"],"names":["Converter","props","state","coinA_value","coinB_value","converter","bind","from_to","this","coinA","coinB","url","fetch","then","res","json","quotation","val","parseFloat","toFixed","setState","className","type","onChange","event","target","value","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6SAIqBA,G,kBAEjB,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAEDC,MAAQ,CACTC,YAAY,GACZC,YAAY,GAGhB,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBARH,E,yEAWN,IAAD,OAEHC,EAAO,UAAMC,KAAKP,MAAMQ,MAAjB,YAA0BD,KAAKP,MAAMS,OAC5CC,EAAG,qDAAiDJ,EAAjD,0CAEPK,MAAMD,GACLE,MAAK,SAAAC,GACF,OAAOA,EAAIC,UAEdF,MAAK,SAAAE,GACF,IAAIC,EAAYD,EAAKR,GAASU,IAC1Bb,GAAec,WAAW,EAAKhB,MAAMC,aAAea,GAAWG,QAAQ,GAC3E,EAAKC,SAAS,CAAChB,qB,+BAKb,IAAD,OACL,OACI,yBAAKiB,UAAU,aACX,4BAAKb,KAAKP,MAAMQ,MAAhB,OAA2BD,KAAKP,MAAMS,OACtC,2BAAOY,KAAK,OAAOC,SAAW,SAACC,GAAS,EAAKJ,SAAS,CAACjB,YAAYqB,EAAMC,OAAOC,WAChF,2BAAOJ,KAAK,SAASI,MAAM,YAAYC,QAASnB,KAAKH,YACrD,4BAAKG,KAAKN,MAAME,kB,GApCOwB,cCqBxBC,MApBf,WACE,OACE,yBAAKR,UAAU,OACb,0DACA,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAWZ,MAAM,MAAMC,MAAM,QAC7B,kBAAC,EAAD,CAAWD,MAAM,MAAMC,MAAM,SAE/B,yBAAKW,UAAU,OACb,kBAAC,EAAD,CAAWZ,MAAM,MAAMC,MAAM,QAC7B,kBAAC,EAAD,CAAWD,MAAM,MAAMC,MAAM,SAE/B,yBAAKW,UAAU,OACb,kBAAC,EAAD,CAAWZ,MAAM,MAAMC,MAAM,QAC7B,kBAAC,EAAD,CAAWD,MAAM,MAAMC,MAAM,WCPjBoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,kB","file":"static/js/main.7a988886.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nimport './converter.css'\n\nexport default class Converter extends Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            coinA_value:\"\",\n            coinB_value:0,\n        }\n\n        this.converter = this.converter.bind(this);\n    }\n\n    converter(){\n        \n        let from_to = `${this.props.coinA}_${this.props.coinB}`;\n        let url = `https://free.currconv.com/api/v7/convert?q=${from_to}&compact=y&apiKey=9bc4c3198176577a4d65`;\n\n        fetch(url)\n        .then(res=>{\n            return res.json()\n        })\n        .then(json=>{\n            let quotation = json[from_to].val;\n            let coinB_value = (parseFloat(this.state.coinA_value) * quotation).toFixed(2);\n            this.setState({coinB_value})\n        })\n\n    }\n\n    render() {\n        return (\n            <div className=\"converter\">\n                <h2>{this.props.coinA} to {this.props.coinB}</h2>\n                <input type=\"text\" onChange={ (event)=>{this.setState({coinA_value:event.target.value})} }></input>\n                <input type=\"button\" value=\"Converter\" onClick={this.converter} ></input>\n                <h2>{this.state.coinB_value}</h2>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\n\nimport Conversor from \"./components/converter\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Coin Converter in React JS</h1>\n      <div className=\"row\">\n        <Conversor coinA=\"GBP\" coinB=\"BRL\"></Conversor>\n        <Conversor coinA=\"BRL\" coinB=\"GBP\"></Conversor>\n      </div>\n      <div className=\"row\">\n        <Conversor coinA=\"USD\" coinB=\"BRL\"></Conversor>\n        <Conversor coinA=\"BRL\" coinB=\"USD\"></Conversor>\n      </div>\n      <div className=\"row\">\n        <Conversor coinA=\"EUR\" coinB=\"BRL\"></Conversor>\n        <Conversor coinA=\"BRL\" coinB=\"EUR\"></Conversor>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}